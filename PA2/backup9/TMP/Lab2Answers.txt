1)
a)
One way to solve the priority inversion problem is by using priority ceiling protocol. In this method, we will assign a predefined 
priority ceiling to each shared resource. This priority ceiling value for particular resource should be higher than the highest priority
process among the processes which are sharing that resource. So, when a process aquire a shared resource, we will temporarily change the 
priority of that process that is executing the shared resource to predefined priority ceiling value. This eliminates the possibility of 
low-priority process preemption by any other higher priority process accessing the same resource. After the process is done exectuting 
shared resource, we will change the priority of that process to its original value.

Another way to solve the problem is Random Boosting method. Here in this method, we will randomly boost the priority of ready threads 
that are holding the locks and are provided with enough time to execute critical section. If thread doesn't get enough time to release 
lock on critical section, it will be given second chance.

Reference :https://www.embedded.com/design/configurable-systems/4024970/How-to-use-priority-inheritance

b)
Let us consider a case of three processes A,B and C. The process A is running concurently with process B
and process C requests lock and is put into wait queue. In default XINU scheduler, after C requests lock, lock is transfered to process B,
whereas in PA2 implemnetation, after C request lock control is transfered to process A but not B as process A inherits priority from 
incoming process C.
----------------------XINU IMPLEMENTATION OUTPUT--------------------------------
ProcessA:to acquire sem
ProcessA:acquired sem
  Process ProcessB running.
ProcessA:to release sem
ProcessC:to acquire sem
ProcessC:acquired sem
  Process ProcessB finished running.
ProcessC:to release sem
----------------------***************************--------------------------------
---------------------PA2 IMPLEMENTATION OUTPUT-----------------------------------
ProcessA: to acquire lock
ProcessA: acquired lock
  Process ProcessB running.
ProcessA: to release lock
ProcessC: to acquire lock
  Process ProcessB finished running.
ProcessC: to release lock
-----------------------***************************--------------------------------

2)
In the given pseudocode, due to thread interleaving there may be inconsistency in data.

We will explain this with below example:
-> Let us consider two threads Thread1 & Thread2 executing shared code concurently by calling do_update and both threads can
acquire READ locks on a shared code.
-> First, If Thread1 if scheduled, it executes the code and it will run until the 8th line of Buffer_add() and it is interleaved 
because higher priority thread2 came in between.
-> If now Thread2 is scheduled because of its higher priority, then there is a chance that Thread2 executes the code
completely and updates the buf_len value.
-> Now, Thread2 is finished and and if we schedule Thread1 again, the value in the buf_len variable is changed and Thread1 does
not know about this. So Thread1 saves overwritten value into its memory.
-> This leads to data inconsitency when threds are interleaved.

We can avoid this situation by giving Exclusive WRITE lock write lock to the process when modifying shared variables.
So, in this pseducode, we will first aquire WRITE lock before modifying the buf_len variable and we will release the WRITE lock
after we update the buf_len to the respective thread memory.


